/**
 *
 * * AptosGovernance represents the on-chain governance of the Aptos network. Voting power is calculated based on the
 * * current epoch's voting power of the proposer or voter's backing stake pool. In addition, for it to count,
 * * the stake pool's lockup needs to be at least as long as the proposal's duration.
 * *
 * * It provides the following flow:
 * * 1. Proposers can create a proposal by calling AptosGovernance::create_proposal. The proposer's backing stake pool
 * * needs to have the minimum proposer stake required. Off-chain components can subscribe to CreateProposalEvent to
 * * track proposal creation and proposal ids.
 * * 2. Voters can vote on a proposal. Their voting power is derived from the backing stake pool. Each stake pool can
 * * only be used to vote on each proposal exactly once.
 * *
 *
 *
 * **Module ID:** `0x1::AptosGovernance`
 *
 * @module
 */
import type * as p from "@movingco/prelude";

/** Event emitted when a proposal is created. */
export type CreateProposalEventData = {
  proposer: p.RawAddress;
  stake_pool: p.RawAddress;
  proposal_id: p.U64;
  execution_hash: p.ByteString;
};

/** Event emitted when there's a vote on a proposa; */
export type VoteEventData = {
  proposal_id: p.U64;
  voter: p.RawAddress;
  stake_pool: p.RawAddress;
  num_votes: p.U64;
  should_pass: boolean;
};

/**
 * Configurations of the AptosGovernance, set during Genesis and can be updated by the same process offered
 * by this AptosGovernance module.
 */
export type GovernanceConfigData = {
  min_voting_threshold: p.U128;
  required_proposer_stake: p.U64;
  voting_period_secs: p.U64;
};

/** Events generated by interactions with the AptosGovernance module. */
export type GovernanceEventsData = {
  create_proposal_events: {
    /** Total number of events emitted to this event stream. */
    counter: p.U64;

    /** A globally unique ID for this event stream. */
    guid: {
      len_bytes: number;
      guid: {
        id: {
          /** If creation_num is `i`, this is the `i+1`th GUID created by `addr` */
          creation_num: p.U64;

          /** Address that created the GUID */
          addr: p.RawAddress;
        };
      };
    };
  };
  update_config_events: {
    /** Total number of events emitted to this event stream. */
    counter: p.U64;

    /** A globally unique ID for this event stream. */
    guid: {
      len_bytes: number;
      guid: {
        id: {
          /** If creation_num is `i`, this is the `i+1`th GUID created by `addr` */
          creation_num: p.U64;

          /** Address that created the GUID */
          addr: p.RawAddress;
        };
      };
    };
  };
  vote_events: {
    /** Total number of events emitted to this event stream. */
    counter: p.U64;

    /** A globally unique ID for this event stream. */
    guid: {
      len_bytes: number;
      guid: {
        id: {
          /** If creation_num is `i`, this is the `i+1`th GUID created by `addr` */
          creation_num: p.U64;

          /** Address that created the GUID */
          addr: p.RawAddress;
        };
      };
    };
  };
};

export type RecordKeyData = {
  stake_pool: p.RawAddress;
  proposal_id: p.U64;
};

/** Event emitted when the governance configs are updated. */
export type UpdateConfigEventData = {
  min_voting_threshold: p.U128;
  required_proposer_stake: p.U64;
  voting_period_secs: p.U64;
};

/** Records to track the proposals each stake pool has been used to vote on. */
export type VotingRecordsData = {
  votes: {
    handle: p.U128;
    length: p.U64;
  };
};

/**
 * Payload arguments for {@link entry.create_proposal}.
 */
export type CreateProposalPayload = {
  args: {
    /** IDL type: `Address` */
    stake_pool: p.RawAddress;
    /** IDL type: `Vector(U8)` */
    execution_hash: p.ByteString;
  };
};

/**
 * Payload arguments for {@link entry.vote}.
 */
export type VotePayload = {
  args: {
    /** IDL type: `Address` */
    stake_pool: p.RawAddress;
    /** IDL type: `U64` */
    proposal_id: p.U64;
    /** IDL type: `Bool` */
    should_pass: boolean;
  };
};

export * as entry from "./entry.js";
export { idl } from "./idl.js";

/** Module ID information. */
export const id = {
  /** The address of the module. */
  ADDRESS: "0x1",
  /** The full module name. */
  FULL_NAME: "0x1::AptosGovernance",
  /** The name of the module. */
  NAME: "AptosGovernance",
} as const;

export * as errors from "./errors.js";

/** Module error codes. */
export const errorCodes = {
  "1": {
    name: "EINSUFFICIENT_PROPOSER_STAKE",
    doc: "Error codes.",
  },
  "2": {
    name: "ENOT_DELEGATED_VOTER",
  },
  "3": {
    name: "EINSUFFICIENT_STAKE_LOCKUP",
  },
  "4": {
    name: "EALREADY_VOTED",
  },
} as const;

/** All module function IDLs. */
export const functions = {
  create_proposal: {
    name: "create_proposal",
    doc: "Create a proposal with the backing `stake_pool`.\n@param execution_hash Required. This is the hash of the resolution script. When the proposal is resolved,\nonly the exact script with matching hash can be successfully executed.",
    ty_args: [],
    args: [
      {
        name: "stake_pool",
        ty: "address",
      },
      {
        name: "execution_hash",
        ty: {
          vector: "u8",
        },
      },
    ],
  },
  vote: {
    name: "vote",
    doc: "Vote on proposal with `proposal_id` and voting power from `stake_pool`.",
    ty_args: [],
    args: [
      {
        name: "stake_pool",
        ty: "address",
      },
      {
        name: "proposal_id",
        ty: "u64",
      },
      {
        name: "should_pass",
        ty: "bool",
      },
    ],
  },
} as const;

/** All struct types with ability `key`. */
export const resources = {
  GovernanceConfig: "0x1::AptosGovernance::GovernanceConfig",
  GovernanceEvents: "0x1::AptosGovernance::GovernanceEvents",
  VotingRecords: "0x1::AptosGovernance::VotingRecords",
} as const;

/** All struct types. */
export const structs = {
  CreateProposalEvent: "0x1::AptosGovernance::CreateProposalEvent",
  GovernanceConfig: "0x1::AptosGovernance::GovernanceConfig",
  GovernanceEvents: "0x1::AptosGovernance::GovernanceEvents",
  RecordKey: "0x1::AptosGovernance::RecordKey",
  UpdateConfigEvent: "0x1::AptosGovernance::UpdateConfigEvent",
  VoteEvent: "0x1::AptosGovernance::VoteEvent",
  VotingRecords: "0x1::AptosGovernance::VotingRecords",
} as const;

/** Payload generators for module `0x1::AptosGovernance`. */
const moduleImpl = {
  ...id,
  errorCodes,
  functions,
  resources,
  structs,
} as const;

/**
 *
 * * AptosGovernance represents the on-chain governance of the Aptos network. Voting power is calculated based on the
 * * current epoch's voting power of the proposer or voter's backing stake pool. In addition, for it to count,
 * * the stake pool's lockup needs to be at least as long as the proposal's duration.
 * *
 * * It provides the following flow:
 * * 1. Proposers can create a proposal by calling AptosGovernance::create_proposal. The proposer's backing stake pool
 * * needs to have the minimum proposer stake required. Off-chain components can subscribe to CreateProposalEvent to
 * * track proposal creation and proposal ids.
 * * 2. Voters can vote on a proposal. Their voting power is derived from the backing stake pool. Each stake pool can
 * * only be used to vote on each proposal exactly once.
 * *
 */
export const moduleDefinition = moduleImpl as p.MoveModuleDefinition<
  "0x1",
  "AptosGovernance"
> as typeof moduleImpl;
